//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "turn")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub turn_id: i32,
    pub session_id: i32,
    pub athlete_id: i32,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub event_id: String,
    #[sea_orm(column_type = "Float")]
    pub total_difficulty: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::athlete::Entity",
        from = "Column::AthleteId",
        to = "super::athlete::Column::AthleteId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Athlete,
    #[sea_orm(
        belongs_to = "super::session::Entity",
        from = "Column::SessionId",
        to = "super::session::Column::SessionId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Session,
    #[sea_orm(has_many = "super::skill::Entity")]
    Skill,
}

impl Related<super::athlete::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Athlete.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl Related<super::skill::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Skill.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
